import time
import requests
import re
import datetime
import os
import cx_Oracle


def get_html(url,data):
   data = data
   url = url
   headers = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36'}
   html = requests.post(url=url, headers=headers, data=data).text
   return html

def re_html(data):
    str1 = (re.search(r'series: \[(.*?)\t\].*?', data, re.M | re.S).group().strip())
    result = re.findall(r'data: (.*?)\}', str1)
    return result


def listToOracle(carList):
   try:
        conn = cx_Oracle.connect('scott/scott@192.168.122.1/orcl')
        # dsn_tns = cx_Oracle.makedsn('192.168.121.1', '1521', service_name='orcl')
        # conn = cx_Oracle.connect(user='scott', password='scott', dsn=dsn_tns)
        cur = conn.cursor()
        cur.executemany("insert into scott.T_DEV_OPERATION_RATE(PL_ID,MODULE_NUM,PRODUCT,WAIT_PREVIOUS,WAIT_NEXT,CHANGEOVER,PART_SUPPLY,MACHINE_ERROR,OPERATOR_DOWNTIME,MAINTENANCE,OTHER,SPIDER_TIME) values(:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12)",carList)
        conn.commit()
        cur.close()
        conn.close()
   except Exception as e:
        return e


def logging(strLog):
    if os.path.exists("./utilization.log"):
        fsize = os.path.getsize("./utilization.log") / float(1024 * 1024)
        if fsize >= 0.02:
            os.rename("./utilization.log","./utilization"+"_"+datetime.datetime.strftime(datetime.datetime.now(),'%Y-%m-%d_%H%M%S')+".log")
            f = open("./utilization.log", "w+")
        else:
            f = open("./utilization.log", "a+")
    else:
        f = open("./utilization.log", "w+")
    f.write(str(datetime.datetime.now()) + "  "+strLog+'\n')
    f.close()

curr_time = datetime.datetime.now()
start=str((curr_time-datetime.timedelta(hours=1)).strftime("%Y-%m-%d %H"))+':00'
end=str(datetime.datetime.strftime(curr_time,'%Y-%m-%d %H'))+':00'

data2_stronger = {
  "__EVENTTARGET": "",
  "__EVENTARGUMENT": "",
  "__VIEWSTATE": "",
  "__EVENTVALIDATION": "/wEdACHVu6XRAn6TkCRrbT84nkRj0J4eK2Fe6yzl9vedxHqyhLh6jHhWtGy+v7iWhTtOE7Qyn9o1AWpGrMI48F2UWCsGbDpLkBvxhhgNkpQKEpKrdBGcovCeb7vQjSVDhBRTQvps0iAst08a0rHslo5zV/nu9Lv7ve9EysSO6VGXmHqDBe3+MR9ycrSqOKmhQJXtO3GfBqBksFSnsAVOMH/NfLz22/YgBXLOKUJOTZm/BnynJUV3jyXV/eH2jUu6avXmp8qqi8lkH3yyLR/Ew6I3miarPRHrsX+lS07KJ1l4lNkdVqwuTrZMkXBDa297nQKB2z5ymXNje9mGByZvlbKcO/aooTOPQTroCVYNu8NKYvXNY+qJdhA+DIe2XOHtlPq2tEr2w7PZv7mAnwL9RAjhwEBYJANa5dd5BhD7EIzCFz2ZaZJ53ZgM9ZoWfWb2mVmHVvlkOQur+3IN59rnKcJvPTeRIRFDHRrZ66YaQH6vPIIRn+iaowRwWBFaNjleg3gxzihQsSuYOIiQ0iF63EtYAfgenRVa40+P14x1f8DN1lnYwVmKUI1pAIfCfnxZRVr1Z9f2gesWkeYaWW2z6rabKf2rQVFZ7fa+Th6amA3bAvgkwHgA71oqwflYo6X+cNISNKJK+0EyzSJyYkXnfH4e9X553YPNAxyjo3UatNIe5d8cNYF/Jafn3TRJLuihf7boAbL6Hn2mLK2+qT6zocC5m5SVN2aILd2srWxewGYBpqzwPw==",
  "UcHeader1$tbSearch": "",
  "dtPickerFrom": start,
  "dtPickerTo": end,
  "ImageButtonUpdate.x": "20",
  "ImageButtonUpdate.y": "11",
}

urlDict_GD2_stronger={
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-5-Line',
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-6-Line',
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-7-Line',
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-8-Line',
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-9-Line',
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-10-Line',
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-11-Line',
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-12-Line',
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-13-Line',
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-14-Line',
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-15-Line',
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-16-Line',
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-17-Line',
    'http://10.10.33.134/fujiweb/fujimoni/UI/TactInfo.aspx?Line=A01-20-Line',
}

carList=[]
for url in urlDict_GD2_stronger:
    html = get_html(url, data2_stronger)
    r=re_html(html)
    line=url[(url.rfind('=')+1):]
    fList=[]
    fList.append(line)
    fList.append((len(r[0].split(","))))
    if len(r) == 9:
        for e in r:
            aa = e[1:-1]
            templist = aa.split(',')
            flist=list(map(int, templist))
            final=sum(flist)
            fList.append(final)
        fList.append(end)
        print(fList)
        logging(end + " "+ line + " 获取数据OK")
        carList.append(fList)
        time.sleep(0)
    else:
        logging(end+" "+line+" 获取数据错误")

# e=listToOracle(carList)
# logging(end+" "+" 数据库报错信息:"+str(e))